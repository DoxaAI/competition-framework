# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: proto/scoreboard.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import (
    TYPE_CHECKING,
    Dict,
    List,
    Optional,
)

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase


if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class AgentResults(betterproto.Message):
    agent_id: int = betterproto.int32_field(1)
    results: Dict[str, int] = betterproto.map_field(
        2, betterproto.TYPE_STRING, betterproto.TYPE_INT64
    )
    activated_at: str = betterproto.string_field(3)


@dataclass(eq=False, repr=False)
class GetCompetitionResultsRequest(betterproto.Message):
    competition_tag: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class GetCompetitionResultsResponse(betterproto.Message):
    scoreboard: List["AgentResults"] = betterproto.message_field(1)


class UmpireScoreboardServiceStub(betterproto.ServiceStub):
    async def get_competition_results(
        self,
        get_competition_results_request: "GetCompetitionResultsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "GetCompetitionResultsResponse":
        return await self._unary_unary(
            "/umpire.scoreboard.UmpireScoreboardService/GetCompetitionResults",
            get_competition_results_request,
            GetCompetitionResultsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class UmpireScoreboardServiceBase(ServiceBase):
    async def get_competition_results(
        self, get_competition_results_request: "GetCompetitionResultsRequest"
    ) -> "GetCompetitionResultsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_get_competition_results(
        self,
        stream: "grpclib.server.Stream[GetCompetitionResultsRequest, GetCompetitionResultsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.get_competition_results(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/umpire.scoreboard.UmpireScoreboardService/GetCompetitionResults": grpclib.const.Handler(
                self.__rpc_get_competition_results,
                grpclib.const.Cardinality.UNARY_UNARY,
                GetCompetitionResultsRequest,
                GetCompetitionResultsResponse,
            ),
        }
